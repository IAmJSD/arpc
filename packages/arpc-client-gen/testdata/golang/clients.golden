// This file was auto-generated by arpc. Do not edit this file.

package client

import (
	"bytes"
	"context"
	"errors"
	"io"
	"net/http"
	"net/url"
	"unsafe"

	"github.com/vmihailenco/msgpack/v5"
)

// Added so that if it isn't imported, this is okay.
var _ = errors.New("")

// Defines the base that all clients will call.
type clientBase struct {
	c       *http.Client
	url     string
	headers map[string]string
}

// BatchError is a batch of errors that can be returned from a batch request.
type BatchError struct {
	// Errors is a list of errors that were returned from the batch request.
	Errors []error
}

// Error implements the error interface.
func (b BatchError) Error() string {
	e := ""
	for i, err := range b.Errors {
		if i != 0 {
			e += ", "
		}
		e += err.Error()
	}
	return e
}

// Defines the error response body.
type errorResponse struct {
	BuiltIn bool               `msgpack:"builtIn"`
	Name    string             `msgpack:"name"`
	Code    string             `msgpack:"code,omitempty"`
	Message string             `msgpack:"message"`
	Body    msgpack.RawMessage `msgpack:"body,omitempty"`
}

// BaseError is the base error that all errors will implement.
type BaseError struct{}

// Error implements the error interface.
func (b BaseError) Error() string {
	return "arpc error"
}

// InvalidResponse is an error that is returned when the response is not what
// is expected from this protocol.
type InvalidResponse struct {
	BaseError

	Code    string `json:"code"`
	Message string `json:"message"`
}

// Error implements the error interface.
func (i InvalidResponse) Error() string {
	return i.Message
}

// UnknownError is an error that is returned when the error is not known.
type UnknownError struct {
	BaseError

	Name    string             `json:"name"`
	Code    string             `json:"code"`
	Message string             `json:"message"`
	Body    msgpack.RawMessage `json:"-"`
}

// Error implements the error interface.
func (u UnknownError) Error() string {
	msg := "unknown exception (" + u.Name + ")"
	if u.Message != "" {
		msg += ": " + u.Message
	}
	return msg
}

var builtInErrors = map[string]func(
	code, message string, body msgpack.RawMessage,
) error{
	"InvalidResponse": func(code, message string, _ msgpack.RawMessage) error {
		return InvalidResponse{
			Code:    code,
			Message: message,
		}
	},
}

var customErrors = map[string]func(msgpack.RawMessage) error{}

// Used when there isn't a body all around the place.
var msgpackNull = []byte{0xc0}

// Processes an error response and turns it into an error.
func processError(e errorResponse) error {
	body := e.Body
	if body == nil {
		body = msgpackNull
	}

	if e.BuiltIn {
		if f, ok := builtInErrors[e.Name]; ok {
			return f(e.Code, e.Message, body)
		}
		return UnknownError{
			Name:    e.Name,
			Code:    e.Code,
			Message: e.Message,
			Body:    body,
		}
	}

	if f, ok := customErrors[e.Name]; ok {
		return f(body)
	}
	return UnknownError{
		Name: e.Name,
		Body: body,
	}
}

// Defines the request that will be sent to the server.
type request struct {
	method   string
	arg      any
	mutation bool
	mutator  func([]byte) (any, error)
}

// The main function to perform the network request.
func (c *clientBase) do(ctx context.Context, req any) (any, error) {
	urlCpy := c.url

	var body any
	reqType := "POST"
	switch r := req.(type) {
	case request:
		if !r.mutation {
			reqType = "GET"
		}
		body = r.arg
		urlCpy += "&route=" + r.method
	case []*request:
		allNonMutators := true
		type batchItem struct {
			MethodName string `msgpack:"methodName"`
			Arg        any    `msgpack:"arg"`
		}
		a := make([]batchItem, len(r))
		for i, req := range r {
			if req.mutation {
				allNonMutators = false
			}
			a[i] = batchItem{
				MethodName: req.method,
				Arg:        req.arg,
			}
		}
		if allNonMutators {
			reqType = "GET"
		}
		body = a
		urlCpy += "&route=batch"
	default:
		panic("unknown request type")
	}

	reqBody, err := msgpack.Marshal(body)
	if err != nil {
		return nil, err
	}
	var reader io.Reader
	if reqType == "GET" {
		esc := url.QueryEscape(unsafe.String(&reqBody[0], len(reqBody)))
		urlCpy += "&arg=" + esc
	} else {
		reader = bytes.NewReader(reqBody)
	}

	httpReq, err := http.NewRequestWithContext(ctx, reqType, urlCpy, reader)
	if err != nil {
		return nil, err
	}
	if reqType == "POST" {
		httpReq.Header.Set("Content-Type", "application/x-msgpack")
	}
	for k, v := range c.headers {
		httpReq.Header.Set(k, v)
	}

	httpResp, err := c.c.Do(httpReq)
	if err != nil {
		return nil, err
	}
	defer httpResp.Body.Close()

	if httpReq.Header.Get("x-is-arpc") != "true" {
		return nil, processError(errorResponse{
			BuiltIn: true,
			Name:    "InvalidResponse",
			Code:    "INVALID_RESPONSE",
			Message: "The response is not an arpc response.",
			Body:    msgpackNull,
		})
	}

	if httpResp.StatusCode == http.StatusNoContent {
		switch r := req.(type) {
		case request:
			return r.mutator(msgpackNull)
		case []*request:
			a := make([]any, len(r))
			for i, req := range r {
				a[i], err = req.mutator(msgpackNull)
				if err != nil {
					return nil, err
				}
			}
			return a, nil
		default:
			panic("unknown request type")
		}
	}

	bodyData, err := io.ReadAll(httpResp.Body)
	if err != nil {
		return nil, err
	}

	if httpResp.StatusCode == http.StatusOK {
		switch r := req.(type) {
		case request:
			return r.mutator(bodyData)
		case []*request:
			var raws []msgpack.RawMessage
			err = msgpack.Unmarshal(bodyData, &raws)
			if err != nil {
				return nil, err
			}
			a := make([]any, len(r))
			for i, raw := range raws {
				a[i], err = r[i].mutator(raw)
				if err != nil {
					return nil, err
				}
			}
			return a, nil
		default:
			panic("unknown request type")
		}
	}

	var errs []errorResponse
	err = msgpack.Unmarshal(bodyData, &errs)
	if err != nil {
		var single errorResponse
		err = msgpack.Unmarshal(bodyData, &single)
		if err != nil {
			return nil, err
		}
		return nil, processError(single)
	}
	errsIface := make([]error, len(errs))
	for i, e := range errs {
		errsIface[i] = processError(e)
	}
	return nil, BatchError{Errors: errsIface}
}

type apiV1EchoHelloWorldBatcher struct {
	reqs *[]*request
}

// Test void function.
func (c *apiV1EchoHelloWorldBatcher) Test() {
internalMutator := func(val []byte) (any, error) {
		var internalVal *struct{}
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.hello.world.test",
		arg:	  nil,
		mutation: true,
		mutator:  internalMutator,
	}
	*c.reqs = append(*c.reqs, reqBuildObj)
}

func newApiV1EchoHelloWorldBatcher(reqs *[]*request) *apiV1EchoHelloWorldBatcher {
	s := &apiV1EchoHelloWorldBatcher{reqs: reqs}
	return s
}

type apiV1EchoHelloBatcher struct {
	reqs *[]*request

	World *apiV1EchoHelloWorldBatcher
}

// String this is a echo function with hello returning a string.
func (c *apiV1EchoHelloBatcher) String(value string) {
internalMutator := func(val []byte) (any, error) {
		var internalVal string
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.hello.string",
		arg:	  value,
		mutation: true,
		mutator:  internalMutator,
	}
	*c.reqs = append(*c.reqs, reqBuildObj)
}

func newApiV1EchoHelloBatcher(reqs *[]*request) *apiV1EchoHelloBatcher {
	s := &apiV1EchoHelloBatcher{reqs: reqs}
	s.World = newApiV1EchoHelloWorldBatcher(s.reqs)
	return s
}

type apiV1EchoBatcher struct {
	reqs *[]*request

	Hello *apiV1EchoHelloBatcher
}

// Boolean this is a echo function with a boolean returning a boolean.
func (c *apiV1EchoBatcher) Boolean(value bool) {
internalMutator := func(val []byte) (any, error) {
		var internalVal bool
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.boolean",
		arg:	  value,
		mutation: false,
		mutator:  internalMutator,
	}
	*c.reqs = append(*c.reqs, reqBuildObj)
}

// Itoa this is a echo function with a number returning a string.
func (c *apiV1EchoBatcher) Itoa(value int) {
internalMutator := func(val []byte) (any, error) {
		var internalVal string
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.itoa",
		arg:	  value,
		mutation: false,
		mutator:  internalMutator,
	}
	*c.reqs = append(*c.reqs, reqBuildObj)
}

// Number this is a echo function with a number returning a number.
func (c *apiV1EchoBatcher) Number(value int) {
internalMutator := func(val []byte) (any, error) {
		var internalVal int
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.number",
		arg:	  value,
		mutation: false,
		mutator:  internalMutator,
	}
	*c.reqs = append(*c.reqs, reqBuildObj)
}

func newApiV1EchoBatcher(reqs *[]*request) *apiV1EchoBatcher {
	s := &apiV1EchoBatcher{reqs: reqs}
	s.Hello = newApiV1EchoHelloBatcher(s.reqs)
	return s
}

type apiV1Batcher struct {
	base *clientBase
	reqs *[]*request

	Echo *apiV1EchoBatcher
}

// Inputless this is a inputless function returning a void.
func (c *apiV1Batcher) Inputless() {
internalMutator := func(val []byte) (any, error) {
		var internalVal *struct{}
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "inputless",
		arg:	  nil,
		mutation: false,
		mutator:  internalMutator,
	}
	*c.reqs = append(*c.reqs, reqBuildObj)
}

// Root this is a root function with a string returning a void.
func (c *apiV1Batcher) Root(name string) {
internalMutator := func(val []byte) (any, error) {
		var internalVal *struct{}
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "root",
		arg:	  name,
		mutation: false,
		mutator:  internalMutator,
	}
	*c.reqs = append(*c.reqs, reqBuildObj)
}

func newApiV1Batcher(base *clientBase) *apiV1Batcher {
	s := &apiV1Batcher{base: base, reqs: &[]*request{}}
	s.Echo = newApiV1EchoBatcher(s.reqs)
	return s
}

type apiV1EchoHelloWorldClient struct {
	base *clientBase
}

// Test void function.
func (c *apiV1EchoHelloWorldClient) Test(ctx context.Context) (*struct{}, error) {
internalMutator := func(val []byte) (any, error) {
		var internalVal *struct{}
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.hello.world.test",
		arg:	  nil,
		mutation: true,
		mutator:  internalMutator,
	}
   internalRes, internalErr := c.base.do(ctx, reqBuildObj)
	if internalErr != nil {
		var internalDefault *struct{}
		return internalDefault, internalErr
	}
	return internalRes.(*struct{}), nil
}

func newApiV1EchoHelloWorldClient(base *clientBase) *apiV1EchoHelloWorldClient {
	s := &apiV1EchoHelloWorldClient{base: base}
	return s
}

type apiV1EchoHelloClient struct {
	base *clientBase

	World *apiV1EchoHelloWorldClient
}

// String this is a echo function with hello returning a string.
func (c *apiV1EchoHelloClient) String(ctx context.Context, value string) (string, error) {
internalMutator := func(val []byte) (any, error) {
		var internalVal string
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.hello.string",
		arg:	  value,
		mutation: true,
		mutator:  internalMutator,
	}
   internalRes, internalErr := c.base.do(ctx, reqBuildObj)
	if internalErr != nil {
		var internalDefault string
		return internalDefault, internalErr
	}
	return internalRes.(string), nil
}

func newApiV1EchoHelloClient(base *clientBase) *apiV1EchoHelloClient {
	s := &apiV1EchoHelloClient{base: base}
	s.World = newApiV1EchoHelloWorldClient(base)
	return s
}

type apiV1EchoClient struct {
	base *clientBase

	Hello *apiV1EchoHelloClient
}

// Boolean this is a echo function with a boolean returning a boolean.
func (c *apiV1EchoClient) Boolean(ctx context.Context, value bool) (bool, error) {
internalMutator := func(val []byte) (any, error) {
		var internalVal bool
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.boolean",
		arg:	  value,
		mutation: false,
		mutator:  internalMutator,
	}
   internalRes, internalErr := c.base.do(ctx, reqBuildObj)
	if internalErr != nil {
		var internalDefault bool
		return internalDefault, internalErr
	}
	return internalRes.(bool), nil
}

// Itoa this is a echo function with a number returning a string.
func (c *apiV1EchoClient) Itoa(ctx context.Context, value int) (string, error) {
internalMutator := func(val []byte) (any, error) {
		var internalVal string
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.itoa",
		arg:	  value,
		mutation: false,
		mutator:  internalMutator,
	}
   internalRes, internalErr := c.base.do(ctx, reqBuildObj)
	if internalErr != nil {
		var internalDefault string
		return internalDefault, internalErr
	}
	return internalRes.(string), nil
}

// Number this is a echo function with a number returning a number.
func (c *apiV1EchoClient) Number(ctx context.Context, value int) (int, error) {
internalMutator := func(val []byte) (any, error) {
		var internalVal int
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "echo.number",
		arg:	  value,
		mutation: false,
		mutator:  internalMutator,
	}
   internalRes, internalErr := c.base.do(ctx, reqBuildObj)
	if internalErr != nil {
		var internalDefault int
		return internalDefault, internalErr
	}
	return internalRes.(int), nil
}

func newApiV1EchoClient(base *clientBase) *apiV1EchoClient {
	s := &apiV1EchoClient{base: base}
	s.Hello = newApiV1EchoHelloClient(base)
	return s
}

// APIV1Client defines this is API V1. Hello World! Please use NewAPIV1Client to create a new instance.
type APIV1Client struct {
	base *clientBase

	Echo *apiV1EchoClient
}

// Inputless this is a inputless function returning a void.
func (c *APIV1Client) Inputless(ctx context.Context) (*struct{}, error) {
internalMutator := func(val []byte) (any, error) {
		var internalVal *struct{}
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "inputless",
		arg:	  nil,
		mutation: false,
		mutator:  internalMutator,
	}
   internalRes, internalErr := c.base.do(ctx, reqBuildObj)
	if internalErr != nil {
		var internalDefault *struct{}
		return internalDefault, internalErr
	}
	return internalRes.(*struct{}), nil
}

// Root this is a root function with a string returning a void.
func (c *APIV1Client) Root(ctx context.Context, name string) (*struct{}, error) {
internalMutator := func(val []byte) (any, error) {
		var internalVal *struct{}
		if internalErr := msgpack.Unmarshal(val, &internalVal); internalErr != nil {
			return nil, internalErr
		}
		return internalVal, nil
	}
   reqBuildObj := &request{
		method:   "root",
		arg:	  name,
		mutation: false,
		mutator:  internalMutator,
	}
   internalRes, internalErr := c.base.do(ctx, reqBuildObj)
	if internalErr != nil {
		var internalDefault *struct{}
		return internalDefault, internalErr
	}
	return internalRes.(*struct{}), nil
}

func newApiV1Client(base *clientBase) *APIV1Client {
	s := &APIV1Client{base: base}
	s.Echo = newApiV1EchoClient(base)
	return s
}

// Execute executes the batch request.
func (c *apiV1Batcher) Execute(ctx context.Context) ([]any, error) {
	resp, err := c.base.do(ctx, *c.reqs)
	if err != nil {
		return nil, err
	}
	return resp.([]any), nil
}

// Batcher returns a new batcher for the API.
func (c *APIV1Client) Batcher() *apiV1Batcher {
	return newApiV1Batcher(c.base)
}

// APIV1Opts defines the options for the API client.
type APIV1Opts struct {
	// Client is the HTTP client to use. If left blank, defaults to http.DefaultClient.
	Client *http.Client `json:"client"`

	// Hostname is the hostname to connect to. If left blank, defaults to example.com.
	Hostname string `json:"hostname"`
}

// NewAPIV1Client creates a new API client.
func NewAPIV1Client(opts APIV1Opts) (*APIV1Client, error) {
	if opts.Hostname == "" {
		opts.Hostname = "https://example.com"
	}

	protoStep := 0
apiv1ClientProtoLoop:
	for _, v := range opts.Hostname {
		switch v {
		case ':':
			protoStep = 1
		case '/':
			if protoStep != 0 {
				protoStep++
			}
			if protoStep == 3 {
				break apiv1ClientProtoLoop
			}
		default:
			protoStep = 0
		}
	}
	if protoStep != 3 {
		opts.Hostname = "https://" + opts.Hostname
	}

	u, err := url.Parse(opts.Hostname)
	if err != nil {
		return nil, err
	}
	u.Path = "/api/rpc"
	u.RawQuery = "version=v1"
	urlStr := u.String()

	httpClient := opts.Client
	if httpClient == nil {
		httpClient = http.DefaultClient
	}

	c := &clientBase{
		c:   httpClient,
		url: urlStr,
	}
	return newApiV1Client(c), nil
}

type apiV2Batcher struct {
	base *clientBase
	reqs *[]*request
}

func newApiV2Batcher(base *clientBase) *apiV2Batcher {
	s := &apiV2Batcher{base: base, reqs: &[]*request{}}
	return s
}

// APIV2Client defines this is authentication without a default. Please use NewAPIV2Client to create a new instance.
type APIV2Client struct {
	base *clientBase
}

func newApiV2Client(base *clientBase) *APIV2Client {
	s := &APIV2Client{base: base}
	return s
}

// Execute executes the batch request.
func (c *apiV2Batcher) Execute(ctx context.Context) ([]any, error) {
	resp, err := c.base.do(ctx, *c.reqs)
	if err != nil {
		return nil, err
	}
	return resp.([]any), nil
}

// Batcher returns a new batcher for the API.
func (c *APIV2Client) Batcher() *apiV2Batcher {
	return newApiV2Batcher(c.base)
}

// APIV2TokenType defines the type that all token types will use.
type APIV2TokenType string

const (
    // APIV2TokenTypeBEARER is the token type for BEARER.
	APIV2TokenTypeBEARER APIV2TokenType = "Bearer"

    // APIV2TokenTypeBOT is the token type for BOT.
	APIV2TokenTypeBOT APIV2TokenType = "Bot"
)

// APIV2OptsAuth defines the options for the API client with authentication.
type APIV2OptsAuth struct {
	// Token defines the token to use for authentication. Will error if not set.
	Token string `json:"token"`

	// TokenType defines the type of token to use for authentication. Will error if not set.
	TokenType APIV2TokenType `json:"token_type"`
}

func (o APIV2OptsAuth) str() (string, error) {
	if o.Token == "" {
		return "", errors.New("token is required")
	}

	if o.TokenType == "" {
		return "", errors.New("token type is required")
	}

	typeMapping := map[APIV2TokenType]string{
		APIV2TokenTypeBEARER: "Bearer",
		APIV2TokenTypeBOT: "Bot",
	}
	webTerm, ok := typeMapping[o.TokenType]
	if !ok {
		return "", errors.New("invalid token type")
	}

	return webTerm + " " + o.Token, nil
}

// APIV2Opts defines the options for the API client.
type APIV2Opts struct {
	// Authentication is the authentication options to use. If nil, no authentication is used.
	Authentication *APIV2OptsAuth `json:"authentication"`

	// Client is the HTTP client to use. If left blank, defaults to http.DefaultClient.
	Client *http.Client `json:"client"`

	// Hostname is the hostname to connect to. If left blank, defaults to memes.com.
	Hostname string `json:"hostname"`
}

// NewAPIV2Client creates a new API client.
func NewAPIV2Client(opts APIV2Opts) (*APIV2Client, error) {
	if opts.Hostname == "" {
		opts.Hostname = "http://memes.com"
	}

	protoStep := 0
apiv2ClientProtoLoop:
	for _, v := range opts.Hostname {
		switch v {
		case ':':
			protoStep = 1
		case '/':
			if protoStep != 0 {
				protoStep++
			}
			if protoStep == 3 {
				break apiv2ClientProtoLoop
			}
		default:
			protoStep = 0
		}
	}
	if protoStep != 3 {
		opts.Hostname = "http://" + opts.Hostname
	}

	u, err := url.Parse(opts.Hostname)
	if err != nil {
		return nil, err
	}
	u.Path = "/api/rpc"
	u.RawQuery = "version=v2"
	urlStr := u.String()

	httpClient := opts.Client
	if httpClient == nil {
		httpClient = http.DefaultClient
	}

	headers := map[string]string{}
	if opts.Authentication != nil {
		auth, err := opts.Authentication.str()
		if err != nil {
			return nil, err
		}
		headers["Authorization"] = auth
	}

	c := &clientBase{
		c:       httpClient,
		url:     urlStr,
		headers: headers,
	}
	return newApiV2Client(c), nil
}

type apiV3Batcher struct {
	base *clientBase
	reqs *[]*request
}

func newApiV3Batcher(base *clientBase) *apiV3Batcher {
	s := &apiV3Batcher{base: base, reqs: &[]*request{}}
	return s
}

// APIV3Client defines this is authentication with a default. Please use NewAPIV3Client to create a new instance.
type APIV3Client struct {
	base *clientBase
}

func newApiV3Client(base *clientBase) *APIV3Client {
	s := &APIV3Client{base: base}
	return s
}

// Execute executes the batch request.
func (c *apiV3Batcher) Execute(ctx context.Context) ([]any, error) {
	resp, err := c.base.do(ctx, *c.reqs)
	if err != nil {
		return nil, err
	}
	return resp.([]any), nil
}

// Batcher returns a new batcher for the API.
func (c *APIV3Client) Batcher() *apiV3Batcher {
	return newApiV3Batcher(c.base)
}

// APIV3TokenType defines the type that all token types will use.
type APIV3TokenType string

const (
    // APIV3TokenTypeBEARER is the token type for BEARER.
	APIV3TokenTypeBEARER APIV3TokenType = "Bearer"

    // APIV3TokenTypeBOT is the token type for BOT.
	APIV3TokenTypeBOT APIV3TokenType = "Bot"
)

// APIV3OptsAuth defines the options for the API client with authentication.
type APIV3OptsAuth struct {
	// Token defines the token to use for authentication. Will error if not set.
	Token string `json:"token"`

	// TokenType defines the type of token to use for authentication. Defaults to BEARER.
	TokenType APIV3TokenType `json:"token_type"`
}

func (o APIV3OptsAuth) str() (string, error) {
	if o.Token == "" {
		return "", errors.New("token is required")
	}

	if o.TokenType == "" {
		o.TokenType = APIV3TokenTypeBEARER
	}

	typeMapping := map[APIV3TokenType]string{
		APIV3TokenTypeBEARER: "Bearer",
		APIV3TokenTypeBOT: "Bot",
	}
	webTerm, ok := typeMapping[o.TokenType]
	if !ok {
		return "", errors.New("invalid token type")
	}

	return webTerm + " " + o.Token, nil
}

// APIV3Opts defines the options for the API client.
type APIV3Opts struct {
	// Authentication is the authentication options to use. If nil, no authentication is used.
	Authentication *APIV3OptsAuth `json:"authentication"`

	// Client is the HTTP client to use. If left blank, defaults to http.DefaultClient.
	Client *http.Client `json:"client"`

	// Hostname is the hostname to connect to. If left blank, defaults to memes.com.
	Hostname string `json:"hostname"`
}

// NewAPIV3Client creates a new API client.
func NewAPIV3Client(opts APIV3Opts) (*APIV3Client, error) {
	if opts.Hostname == "" {
		opts.Hostname = "http://memes.com"
	}

	protoStep := 0
apiv3ClientProtoLoop:
	for _, v := range opts.Hostname {
		switch v {
		case ':':
			protoStep = 1
		case '/':
			if protoStep != 0 {
				protoStep++
			}
			if protoStep == 3 {
				break apiv3ClientProtoLoop
			}
		default:
			protoStep = 0
		}
	}
	if protoStep != 3 {
		opts.Hostname = "http://" + opts.Hostname
	}

	u, err := url.Parse(opts.Hostname)
	if err != nil {
		return nil, err
	}
	u.Path = "/api/rpc"
	u.RawQuery = "version=v3"
	urlStr := u.String()

	httpClient := opts.Client
	if httpClient == nil {
		httpClient = http.DefaultClient
	}

	headers := map[string]string{}
	if opts.Authentication != nil {
		auth, err := opts.Authentication.str()
		if err != nil {
			return nil, err
		}
		headers["Authorization"] = auth
	}

	c := &clientBase{
		c:       httpClient,
		url:     urlStr,
		headers: headers,
	}
	return newApiV3Client(c), nil
}
